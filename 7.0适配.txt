权限更改


随着Android版本越来越高，Android对隐私的保护力度也越来越大。从Android6.0引入的动态权限控制(Runtime
 Permissions)到Android7.0的“私有目录被限制访问”，“StrictMode API 政策”。这些更改在为用户带来更加安全的操作系统的同时也为开发者带来了一些新的任务。如何让你的APP能够适应这些改变而不是cash，是摆在每一位Android开发者身上的责任。

目录被限制访问


一直以来，在目录及文件的访问保护方面iOS做的是很到位的，如：iOS的沙箱机制。但，Android在这方面的保护就有些偏弱了，在Android中应用可以读写手机存储中任何一个目录及文件，这也带来了很多的安全问题。现在Android也在着力解决这一问题。


在Android7.0中为了提高私有文件的安全性，面向Android N 或更高版本的应用私有目录将被限制访问。对于这个权限的更改开发者需要留意一下改变：


私有文件的文件权限不在放权给所有的应用，使用MODE_WORLD_READABLE 或 MODE_WORLD_WRITEABLE 进行的操作将触发
 SecurityException。


应对策略：这项权限的变更将意味着你无法通过File API访问手机存储上的数据了，基于File API的一些文件浏览器等也将受到很大的影响，看到这大家是不是惊呆了呢，不过迄今为止，这种限制尚不能完全执行。 应用仍可能使用原生 API 或 File API 来修改它们的私有目录权限。 但是，Android官方强烈反对放宽私有目录的权限。可以看出收起对私有文件的访问权限是Android将来发展的趋势。


给其他应用传递 file:// URI 类型的Uri，可能会导致接受者无法访问该路径。 因此，在Android7.0中尝试传递 file:// URI 会触发 FileUriExposedException。


应对策略：大家可以通过使用FileProvider来解决这一问题。


DownloadManager 不再按文件名分享私人存储的文件。COLUMN_LOCAL_FILENAME在Android7.0中被标记为deprecated，
 旧版应用在访问 COLUMN_LOCAL_FILENAME时可能出现无法访问的路径。
 面向 Android N 或更高版本的应用在尝试访问COLUMN_LOCAL_FILENAME 时会触发
 SecurityException。


应对策略：大家可以通过ContentResolver.openFileDescriptor()来访问由DownloadManager 公开的文件。



应用间共享文件


在Android7.0系统上，Android 框架强制执行了 StrictMode API 政策禁止向你的应用外公开 file:// URI。 如果一项包含文件 file:// URI类型 的 Intent 离开你的应用，应用失败，并出现 FileUriExposedException 异常，如调用系统相机拍照，或裁切照片。


应对策略：若要在应用间共享文件，可以发送 content:// URI类型的Uri，并授予 URI 临时访问权限。 进行此授权的最简单方式是使用 FileProvider类。
 如需有关权限和共享文件的更多信息，请参阅共享文件。



在Android7.0上调用系统相机拍照，裁切照片

调用系统相机拍照


在Android7.0之前，如果你想调用系统相机拍照可以通过以下代码来进行：

File file=new File(Environment.getExternalStorageDirectory(), 
                    "/temp/"+System.currentTimeMillis() + ".jpg");
if (!file.getParentFile().exists())
        file.getParentFile().mkdirs();
        
Uri imageUri = Uri.fromFile(file);
Intent intent = new Intent();
intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);//设置Action为拍照
intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);//将拍取的照片保存到指定URI
startActivityForResult(intent,1006);






在Android7.0上使用上述方式调用系统相拍照会抛出如下异常：

android.os.FileUriExposedException: 
file:////storage/emulated/0/temp/1474956193735.jpg 
exposed beyond app through Intent.getData()

at android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)
at android.net.Uri.checkFileUriExposed(Uri.java:2346)
at android.content.Intent.prepareToLeaveProcess(Intent.java:8933)
at android.content.Intent.prepareToLeaveProcess(Intent.java:8894)
at android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)
at android.app.Activity.startActivityForResult(Activity.java:4223)
...at android.app.Activity.startActivityForResult(Activity.java:4182)






这是由于Android7.0执行了“StrictMode API 政策禁”的原因，不过小伙伴们不用担心，上文讲到了可以用FileProvider来解决这一问题，
 现在我们就来一步一步的解决这个问题。



使用FileProvider


使用FileProvider的大致步骤如下：


第一步：在manifest清单文件中注册provider


<provider
    android:name="android.support.v4.content.FileProvider"
    android:authorities="com.jph.takephoto.fileprovider"
    android:grantUriPermissions="true"
    android:exported="false">
    <meta-data
        android:name="android.support.FILE_PROVIDER_PATHS"
        android:resource="@xml/file_paths" /></provider>


心得：exported:要求必须为false，为true则会报安全异常。grantUriPermissions:true，表示授予 URI 临时访问权限。


第二步：指定共享的目录


为了指定共享的目录我们需要在资源(res)目录下创建一个xml目录，然后创建一个名为“file_paths”(名字可以随便起，只要和在manifest注册的provider所引用的resource保持一致即可)的资源文件，内容如下：

<?xml version="1.0" encoding="utf-8"?><resources></resources>
    <paths>path="" name="camera_photos" />   </paths>




代表的根目录： Context.getFilesDir()


代表的根目录: Environment.getExternalStorageDirectory()


代表的根目录: getCacheDir()


心得：上述代码中path=""，是有特殊意义的，它代码根目录，也就是说你可以向其它的应用共享根目录及其子目录下任何一个文件了，如果你将path设为path="pictures"，
 那么它代表着根目录下的pictures目录(eg:/storage/emulated/0/pictures)，如果你向其它应用分享pictures目录范围之外的文件是不行的。






第三步：使用FileProvider


上述准备工作做完之后，现在我们就可以使用FileProvider了。 


还是以调用系统相机拍照为例，我们需要将上述拍照代码修改为如下：

File file=new File(Environment.getExternalStorageDirectory(), "/temp/"+System.currentTimeMillis() + ".jpg");
if (!file.getParentFile().exists())
    file.getParentFile().mkdirs();
Uri imageUri = FileProvider.getUriForFile(context,                     "com.jph.takephoto.fileprovider", file);//通过FileProvider创建一个content类型的Uri
Intent intent = new Intent();
intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); //添加这一句表示对目标应用临时授权该Uri所代表的文件intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);//设置Action为拍照
intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);//将拍取的照片保存到指定URI
startActivityForResult(intent,1006);






上述代码中主要有两处改变：


1. 将之前Uri的scheme类型为file的Uri改成了有FileProvider创建一个content类型的Uri。 

2. 添加了intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);来对目标应用临时授权该Uri所代表的文件。





心得：上述代码通过FileProvider的Uri
 getUriForFile (Context context, String authority, File file) 静态方法来获取Uri，该方法中authority参数就是清单文件中注册provider的android:authorities=


"com.jph.takephoto.fileprovider"。
 对Web服务器如tomcat，IIS比较熟悉的小伙伴，都只知道为了网站内容的安全和高效，Web服务器都支持为网站内容设置一个虚拟目录，其实FileProvider也有异曲同工之处。


将getUriForFile方法获取的Uri打印出来如下:

content://com.jph.takephoto.fileprovider/camera_photos/temp/1474960080319.jpg`。  


其中camera_photos就是file_paths.xml中paths的name。


因为上述指定的path为path=""，所以


content://com.jph.takephoto.fileprovider/camera_photos/代表的真实路径就是根目录，


即：/storage/emulated/0/。content://com.jph.takephoto.fileprovider/camera_photos/temp/1474960080319.jpg代表的真实路径是：


/storage/emulated/0/temp/1474960080319.jpg。


另外，推荐大家使用开源工具库TakePhoto， TakePhoto是一款在Android设备上获取照片（拍照或从相册、文件中选择）、裁剪图片、压缩图片的开源工具库。

裁切照片


在Android7.0之前，你可以通过如下方法来裁切照片：

File file=new File(Environment.getExternalStorageDirectory(), 
                        "/temp/"+System.currentTimeMillis() + ".jpg");
if (!file.getParentFile().exists())file.getParentFile().mkdirs();
Uri outputUri = Uri.fromFile(file);
Uri imageUri=Uri.fromFile(new File( 
                "/storage/emulated/0/temp/1474960080319.jpg"));
Intent intent = new Intent("com.android.camera.action.CROP");
intent.setDataAndType(imageUri, "image/*");
intent.putExtra("crop", "true");
intent.putExtra("aspectX", 1);
intent.putExtra("aspectY", 1);
intent.putExtra("scale", true);
intent.putExtra(MediaStore.EXTRA_OUTPUT, outputUri);
intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());
intent.putExtra("noFaceDetection", true); // no face detection
startActivityForResult(intent,1008);


和拍照一样，上述代码在Android7.0上同样会引起android.os.FileUriExposedException异常，解决办法就是上文说说的使用FileProvider。


然后，将上述代码改为如下即可：

File file=new File(Environment.getExternalStorageDirectory(), 
                    "/temp/"+System.currentTimeMillis() + ".jpg");
if (!file.getParentFile().exists())
            file.getParentFile().mkdirs();
Uri outputUri = FileProvider.getUriForFile(context, 
                        "com.jph.takephoto.fileprovider",file); 
Uri imageUri=FileProvider.getUriForFile(context, 
                        "com.jph.takephoto.fileprovider", 
    new File("/storage/emulated/0/temp/1474960080319.jpg");
//通过FileProvider创建一个content类型的Uri

Intent intent = new Intent("com.android.camera.action.CROP");
intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
intent.setDataAndType(imageUri, "image/*");
intent.putExtra("crop", "true");
intent.putExtra("aspectX", 1);
intent.putExtra("aspectY", 1);
intent.putExtra("scale", true);
intent.putExtra(MediaStore.EXTRA_OUTPUT, outputUri);
intent.putExtra("outputFormat", 
              Bitmap.CompressFormat.JPEG.toString());
intent.putExtra("noFaceDetection", true); // no face detection

startActivityForResult(intent,1008);


另外，裁切照片推荐大家使用开源工具库TakePhoto， TakePhoto是一款在Android设备上获取照片（拍照或从相册、文件中选择）、裁剪图片、压缩图片的开源工具库。



电池和内存


Android 6.0（API 级别 23）引入了低电耗模式，Android7.0在电池和内存上又做了进一步优化， 来减少Android应用对电量的消耗以及对内存的占用。这些优化所带来的一些规则的变更可能会影响你的应用访问系统资源，以及你的系统通过特定隐式 Intent 与其他应用互动的方式。 所以开发人员需要特别注意这些改变。



低电耗模式


在低电耗模式下，当用户设备未插接电源、处于静止状态且屏幕关闭时，该模式会推迟 CPU 和网络活动，从而延长电池寿命。 Android7.0通过在设备未插接电源且屏幕关闭状态下、但不一定要处于静止状态（例如用户外出时把手持式设备装在口袋里）时应用部分 CPU 和网络限制，进一步增强了低电耗模式。


也就是说，Android7.0会在手机屏幕关闭的状态下，限时应用对CPU以及网络的使用。






具体规则如下：


当设备处于充电状态且屏幕已关闭一定时间后，设备会进入低电耗模式并应用第一部分限制： 关闭应用网络访问、推迟作业和同步。


如果进入低电耗模式后设备处于静止状态达到一定时间，系统则会对PowerManager.WakeLock、AlarmManager 闹铃、GPS
 和 Wi-Fi 扫描应用余下的低电耗模式限制。 无论是应用部分还是全部低电耗模式限制，系统都会唤醒设备以提供简短的维护时间窗口，在此窗口期间，应用程序可以访问网络并执行任何被推迟的作业/同步。



后台优化


小伙伴们都知道在Android中有一些隐式广播，使用这些隐式广播可以做一些特定的功能，如，当手机网络变成WiFi时自动下载更新包等。 但，这些隐式广播会在后台频繁启动已注册侦听这些广播的应用，从而带来很大的电量消耗，为缓解这一问题来提升设备性能和用户体验，在Android 7.0中删除了三项隐式广播，以帮助优化内存使用和电量消耗。





Android 7.0 应用了以下优化措施：






在 Android 7.0上 应用不会收到 CONNECTIVITY_ACTION 广播，即使你在manifest清单文件中设置了请求接受这些事件的通知。
 但，在前台运行的应用如果使用BroadcastReceiver 请求接收通知，则仍可以在主线程中侦听 CONNECTIVITY_CHANGE。


在 Android 7.0上应用无法发送或接收 ACTION_NEW_PICTURE或ACTION_NEW_VIDEO 类型的广播。


应对策略：Android 框架提供多个解决方案来缓解对这些隐式广播的需求。 例如，JobScheduler
 API 提供了一个稳健可靠的机制来安排满足指定条件（例如连入无限流量网络）时所执行的网络操作。 您甚至可以使用JobScheduler
 API 来适应内容提供程序变化。


另外，大家如果想了解更多关于后台的优化可查阅后台优化。


移动设备会经历频繁的连接变更，例如在 Wi-Fi 和移动数据之间切换时。 目前，可以通过在应用清单中注册一个接收器来侦听隐式 CONNECTIVITY_ACTION广播，
 让应用能够监控这些变更。 由于很多应用会注册接收此广播，因此单次网络切换即会导致所有应用被唤醒并同时处理此广播。


以上是，我在Android7.0上适配上的一些心得，小伙伴们可以在下方留言，大家一起进步。
============================================================================一般监听网络变化是在 AndroidManifest 中注册 BroadcastReceiver 来实现。 targetSdkVersion 升级到 24 后，发现静态注册广播的方式要被取消了。

Declaring a broadcastreceiver for android.net.conn.CONNECTIVITY_CHANGE is deprecated for apps targeting N and higher. In general, apps should not rely on this broadcast and instead use JobScheduler or GCMNetworkManager.  
Android 7.0 为了后台优化，推荐使用 JobScheduler 代替 BroadcastReceiver 来监听网络变化。（地址）

手上暂时没有 Android 7.0 的手机， 于是用 6.0 来测试了一下， 同时用 JobScheduler 和 BroadcastReceiver 监听网络变化。 断网后重新连接， BroadcastReceiver 收到系统通知后，JobScheduler 可能 10 秒内都接收不到事件，基本没有实时性。

不过官方文档里还有另一种方案，用 ConnectivityManager.NetworkCallback 来监听网络。测试了一下，实时性和 BroadcastReceiver 一致。

BroadcastReceiver 会接收所有网络变化，具体状态需要自己判断。NetworkCallback 接口更加友好了，例如只监听网络连接恢复。

ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

connectivityManager.requestNetwork(new NetworkRequest.Builder().build(), new ConnectivityManager.NetworkCallback() {  
        @Override public void onAvailable(Network network) {
            super.onAvailable(network);
        }
    });
调试时发现调用 requestNetwork 在 Android 6.0 系统出现权限导致的崩溃，查了一下原来是个系统 Bug， Android 6.0.1 已修复。 那么实际使用的话，还是得再将兼容版本上升到 7.0 才行。

最后对于兼容性：

可以通过动态注册 BroadcastReceiver 继续使用。
也可以判断 API 24（N） 以上用 NetworkCallback， 低版本用 BroadcastReceiver。
另外， JobScheduler 的使用场景主要是优化后台任务启动时机，比如唤醒数据同步这种非实时性的后台任务。 前台运行时还是不适合用 JobScheduler 订阅系统变化。
========================================================================
升级到Android7.0之后，启动系统相机或者截图，传入URI的时候可能会导致程序闪退崩溃。这是因为7.0的新的文件权限导致的。下面是解决这个问题的快速解决方案。

问题代码

在7.0可能会出问题的代码：

final String CACHE_IMG = Environment.getExternalStorageDirectory()+"/demo/"
final int TAG_PHOTO_CAMERA=200;


Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

String fileName = "defaultImage.jpg";

File file = new File(CACHE_IMG, fileName);

Uri uri = Uri.fromFile(file);

intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);

startActivityForResult(intent, TAG_PHOTO_CAMERA);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
其中Uri uri = Uri.fromFile(file);这里会导致闪退。

解决方法

step1. 将Uri的生成方式改为由FileProvider提供的临时授权路径，并且在intent中添加flag 
修改后代码如下

final String CACHE_IMG = Environment.getExternalStorageDirectory()+"/demo/"
final int TAG_PHOTO_CAMERA=200;

Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

String fileName = "defaultImage.jpg";

File file = new File(CACHE_IMG, fileName);

Uri imageUri=FileProvider.getUriForFile(activity,"me.xifengwanzhao.fileprovider", file);//这里进行替换uri的获得方式

intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);

intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);//这里加入flag

startActivityForResult(intent, TAG_PHOTO_CAMERA);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
step2.在AndroidManifest.xml中的application标签中添加provider的配置

   <application
       ...>
         <provider
            android:name="android.support.v4.content.FileProvider"
            android:authorities="me.xifengwanzhao.fileprovider"//这里需要和上面部分字符串相同
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths" />
        </provider>
    </application>
1
2
3
4
5
6
7
8
9
10
11
12
13
step3.在res/xml中新建一个文件file_paths.xml

<?xml version="1.0" encoding="utf-8"?>
<resource xmlns:android="http://schemas.android.com/apk/res/android">
    <external-path
        name="images"
        path="demo/" />
</resource>
1
2
3
4
5
6
OK，大功告成，这样就不会崩溃了

代码解释

我们先看Google官方的7.0行为变更介绍 （不需要翻墙）

对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。

要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件。
根据文档提示我们使用FileProvider进行处理，同时利用xml对FileProvider进行配置 
参考如下

java根路径产生方式 对应xml根节点名称
Context.getFilesDir()   files-path
getCacheDir()   cache-path
Environment.getExternalStorageDirectory()   external-path
Context#getExternalFilesDir(String) Context.getExternalFilesDir(null)   external-files-path
Context.getExternalCacheDir()   external-cache-path
节点中的name 不可重名，path为自定义

关于相册选图和相机裁剪

有同学反映相册选图和相机裁剪时候的报错问题，这里也说一下 
系统相册选图返回的Uri是可以直接使用的，不需要也不能使用FileProvider进行转换 
如果需要根据uri获得转换后的uri 可以参考如下方式

Uri fromUri;
if (uri.getScheme() != null && uri.getScheme().startsWith("file")) {
    fromUri =
         FileProvider.getUriForFile(mContext,"me.xifengwanzhao.fileprovider", new File(FileUtils.getPath(mContext, uri)));//这里进行替换uri的获得方式
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);//这里加入flag
} else {
     //相册选图适配
     fromUri = uri;
}
1
2
3
4
5
6
7
8
9
关于相机裁剪 
相机裁剪 intent.setDataAndType(fromUri, “image/*”);这里是需要对uri进行转换的， 
而 intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));这里使用原来的方式获取uri就可以了 
那么启动系统裁剪的方法可以写成这样

    /**
     * 开启截图,启动系统的截图方法 返回requestCode为 {Constant.IMG_ZOOM}
     *
     * @param mContext 必须为activity
     * @param uri      需要进行裁剪的图片的uri
     * @param size     截图的大小宽和高的数值，这里仅限截图为1:1的正方形
     * @return path 截图返回的路径
     * @see Constant#IMG_ZOOM
     */
    public static String startPhotoZoom(Activity mContext, Uri uri, int size) {
        //这里生成一个保存截图用的临时路径并且返回出去
        String imgPath;
        File file = new File(Constant.ZOOM_IMAGE, Constant.getNewestImageName(mContext));
        imgPath = file.getPath();

        Intent intent = new Intent("com.android.camera.action.CROP");
        Uri fromUri;
        if (uri.getScheme() != null && uri.getScheme().startsWith("file")) {
            fromUri = FileProvider.getUriForFile(mContext, "me.xifengwanzhao.fileprovider", new File(FileUtils.getPath(mContext, uri)));//这里进行替换uri的获得方式
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);//这里加入flag
        } else {
            //相册选图适配
            fromUri = uri;
        }
        intent.setDataAndType(fromUri, "image/*");
        intent.putExtra("crop", "true");
        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));
        if (android.os.Build.MANUFACTURER.contains("HUAWEI")) {// 华为特殊处理 不然会显示圆
            intent.putExtra("aspectX", 9998);
            intent.putExtra("aspectY", 9999);
        } else {
            intent.putExtra("aspectX", 1);
            intent.putExtra("aspectY", 1);
        }
        intent.putExtra("outputX", size);
        intent.putExtra("outputY", size);
        mContext.startActivityForResult(intent, Constant.IMG_ZOOM);
        return imgPath;
    }
    ===================================================================================================================
    <table>标签的属性设置
带边框的表格：
<table border=1 >
<tr><th>Food</th><th>Drink</th><th>Sweet</th> 
<tr><td>A</td><td>B</td><td>C</td> 
</table>

Food    Drink   Sweet
A   B   C
不带边框的表格：
<table> <tr><th>Food</th><th>Drink</th><th>Sweet</th> <tr><td>A</td><td>B</td><td>C</td> </table>

Food    Drink   Sweet
A   B   C
边框尺寸设置： <table border=#> #=边框粗度

<table border=10>
            <tr><th>Food</th><th>Drink</th><th>Sweet</th>
            <tr><td>A</td><td>B</td><td>C</td>
            </table>
Food    Drink   Sweet
A   B   C
<table border width=# height=#>width：宽度，height：高度,#＝象素
设置表格宽度和高度：
<table border width=170 height=100> <tr><th>Food</th><th>Drink</th><th>Sweet</th> <tr><td>A</td><td>B</td><td>C</td> </table>

Food    Drink   Sweet
A   B   C
<table border cellspacing=#> #=象素

表元间隙设置：
<table border cellspacing=10> <tr><th>Food</th><th>Drink</th><th>Sweet</th> <tr><td>A</td><td>B</td><td>C</td> </table>

Food    Drink   Sweet
A   B   C
<table border cellpadding=#> #=象素 
表元内部空白设置：
<table border cellpadding=10> <tr><th>Food</th><th>Drink</th><th>Sweet</th> <tr><td>A</td><td>B</td><td>C</td> </table>

Food    Drink   Sweet
A   B   C
<table align=#> #=left,right,center

设置表格在网页中的布局位置：
            <table align="left" border>
            <tr><th>Food</th><th>Drink</th><th>Sweet</th>
            <tr><td>A</td><td>B</td><td>C</td>
            </table>
            My favorites...<br>
            cookies, chocolates, and more.
 
Food    Drink   Sweet
A   B   C My favorites...
cookies, chocolates, and more.
表格的标题
<caption > 标题内容</caption> 
align=left,right,center valign=bottom,top

<table border>
            <caption align=center>Lunch</caption>
            <tr><th>Food</th><th>Drink</th><th>Sweet</th>
            <tr><td>A</td><td>B</td><td>C</td>
            </table>
Lunch
Food    Drink   Sweet
A   B   C
表格边框的色彩 
<table bordercolor=#>

<table cellspacing=5 border=5 bodercolor=#ffaa00>
            <tr><th>Food</th><th>Drink</th><th>Sweet</th>
            <tr><td>A</td><td>B</td><td>C</td>
            </table>
Food    Drink   Sweet
A   B   C
表格边框色彩的亮度控制 
<table bordercolorlight=#>
<table bordercolordark=#>

<table 
cellspacing=5 border=5
            bordercolorlight=blue bordercolordark=Maroon>
            <tr><th>Food</th><th>Drink</th><th>Sweet</th>
            <tr><td>A</td><td>B</td><td>C</td>
            </table>
Food    Drink   Sweet
A   B   C

一、表格中单元格之间分隔线的隐藏方法

第   一   行
第   二   行
第   三   行   这个表格去掉了单元格之间的横向分隔线(rules=cols)

第   第   第
一   二   三
列   列   列   这个表格去掉了单元格之间的纵向分隔线(rules=rows)
横       线
竖       线
都   没   了   这个表格去掉了单元格之间的纵向分隔线和横向分隔线(rules=none)
　　其实上面的三个表格都有三行三列，隐藏分隔线的诀窍在于rules，察看这三个表格的源代码，我们可以看到<TABLE>标签中都有rules。 它有三个参数(cols,rows,none)，当rules=cols时，表格会隐藏纵向的分隔线，这样我们就只能看到表格的行；当rules=rows时，则 隐藏了横向的分隔线，这样我们只能看到表格的列；而当rules=none时，纵向分隔线和横向分隔线将全部隐藏。

二、表格边框的隐藏

普   表
通   格   这是一普通的表格

不怕  下雨
        只显示上边框(frame=above)
 
下起雨来    该怎么办    只显示下边框(frame=below)

上不着天     
    下不着地    只显示左、右边框(frame=vsides)
两边走开
老子姓王        只显示上、下边框( frame=hsides)

左右   
为难      只显示左边框( frame=lhs)
左右
    为难  只显示右边框(frame=rhs)

光秃秃  
    全脱了 不显示任何边框(frame=void)
表格边框的显示与隐藏，是可以用frame参数来控制的。请注意它只控制表格的边框图，而不影晌单元格。
只显示上边框 <table frame=above>
只显示下边框 <table frame=below> 
只显示左、右边框 <table frame=vsides>
只显示上、下边框 <table frame=hsides>
只显示左边框 <table frame=lhs>
只显示右边框 <table frame=rhs>
不显示任何边框 <table frame=void>
三、表格边框

普   表
通   格
这是一普通的表格

<table border="1" width="200" cellpadding="0" cellspacing="0"> <tr align="center"> <td>普</td> <td>表</td> </tr> <tr align="center"> <td>通</td> <td>格</td> </tr> </table>
细   表
线   格
表格加上了漂亮的细线
(利用cellspacing1像素间隙和表格与单元格背景的不同)

<table border="0" width="200" cellspacing="1" cellpadding="0" bgcolor="#000000" > <tr align="center" bgcolor="#FFFFFF"> <td bgcolor="#FFFFFF">细</td> <td bgcolor="#FFFFFF">表</td> </tr> <tr align="center" bgcolor="#FFFFFF"> <td bgcolor="#FFFFFF">线</td> <td bgcolor="#FFFFFF">格</td> </tr> </table>
细   表
线   格
这和上面那个可不一样，它用的是CSS，效果却一样。
(对单元格border的定义)

<table width="200" cellspacing="0" cellpadding="0"> <tr align="center"> <td style="BORDER-top: rgb(0,0,0) 1px groove; BORDER-bottom: rgb(0,0,0) 1px groove; BORDER-left: rgb(0,0,0) 1px groove; BORDER-right: rgb(0,0,0) 1px groove">细</td> <td style="BORDER-top: rgb(0,0,0) 1px groove; BORDER-bottom: rgb(0,0,0) 1px groove; BORDER-right: rgb(0,0,0) 1px groove">表</td> </tr> <tr align="center"> <td style="BORDER-bottom: rgb(0,0,0) 1px groove; BORDER-left: rgb(0,0,0) 1px groove; BORDER-right: rgb(0,0,0) 1px groove">线</td> <td style="BORDER-bottom: rgb(0,0,0) 1px groove; BORDER-right: rgb(0,0,0) 1px groove">格</td> </tr> </table>
细   表
线   格
再进一步，把边框变成虚线，同样是CSS的神奇作用。

<table width="200" cellspacing="0" cellpadding="0"> <tr align="center"> <td style="BORDER-top: rgb(0,0,0) 1px dotted; BORDER-bottom: rgb(0,0,0) 1px dotted; BORDER-left: rgb(0,0,0) 1px dotted; BORDER-right: rgb(0,0,0) 1px dotted">细</td> <td style="BORDER-top: rgb(0,0,0) 1px dotted; BORDER-bottom: rgb(0,0,0) 1px dotted; BORDER-right: rgb(0,0,0) 1px dotted">表</td> </tr> <td style="BORDER-bottom: rgb(0,0,0) 1px dotted; BORDER-left: rgb(0,0,0) 1px dotted; BORDER-right: rgb(0,0,0) 1px dotted">线</td> <td style="BORDER-bottom: rgb(0,0,0) 1px dotted; BORDER-right: rgb(0,0,0) 1px dotted">格</td> </tr> </table>
1   
2
3   
4 细线表格的扩展应用，奥妙就是在第个单元格中再套入一个表格。 <table width="200" border="0" cellspacing="2" cellpadding="0"> <tr> <td> <table width="100%" border="0" cellspacing="1" cellpadding="0" bgcolor="#000000"> <tr> <td bgcolor="#FFFFFF"> </td> </tr> </table> </td> <td> <table width="100%" border="0" cellspacing="1" cellpadding="0" bgcolor="#000000"> <tr> <td bgcolor="#FFFFFF"> </td> </tr> </table> </td> </tr> <tr> <td> <table width="100%" border="0" cellspacing="1" cellpadding="0" bgcolor="#000000"> <tr> <td bgcolor="#FFFFFF"> </td> </tr> </table> </td> <td> <table width="100%" border="0" cellspacing="1" cellpadding="0" bgcolor="#000000"> <tr> <td bgcolor="#FFFFFF"> </td> </tr> </table> </td> </tr> </table>
立   表
体   格
立体感的表格
(简单的亮暗边框设置，注意只有IE支持这种效果)

<table border="1" bordercolorlight="#ffffff" bordercolordark="#ffffff" width="200" cellpadding="0" cellspacing="0"> <tr align="center"> <td bgcolor="#B7B7B7" bordercolorlight="#000000" bordercolordark="#eeeeee" >立</td> <td bgcolor="#B7B7B7" bordercolorlight="#000000" bordercolordark="#eeeeee" >表</td> </tr> <tr align="center"> <td bgcolor="#B7B7B7" bordercolorlight="#000000" bordercolordark="#eeeeee" >体</td> <td bgcolor="#B7B7B7" bordercolorlight="#000000" bordercolordark="#eeeeee" >格</td> </tr> </table>
无名表格 给表格加上一个表头
(应用<fieldset>和</legend>标签)  <table width="200" cellpadding="0" cellspacing="0"> <tr> <td><fieldset style="width:200" align="center"> <legend> 无名表格 </legend> <p align="right"> </fieldset></td> </tr> </table>
表中表效果Ⅰ 给表头再加个框
(用CSS为<legnd>定义一个边框)    <table width="200"" cellspacing="0" cellpadding="0"> <tr> <td> <fieldset style="width: 200; color: #B7B7B7; border-style: groove" align="center"> <legend style="color: blue; border: 1 solid #000000"> 表中表效果Ⅰ</legend> <br> </fieldset> </td> </tr> </table>
表中表效果Ⅱ
看起来和上面的一样，可是这个才是真正的表中表哦。
(在<legnd>中插入一个表格)   <table width="200"> <tr> <td><fieldset style="width:200" align="center"> <legend> <table style="border: 1 solid #000000" width="80" cellspacing="1" cellpadding="0" height="20"> <tr> <td><font color=blue>表中表效果Ⅱ</font></td> </tr> </table> </legend><br> </fieldset> </td> </tr> </table>
四、表格单元格的背景色和添加背景图片

第一  行
第二  行
<html>
<body>

<h4>单元格背景色：</h4>
<table border="1">
<tr>
<td bgcolor="red">第一</td>
<td>行</td>
</tr>
<tr>
<td background="../images/html_tutorials/background.gif">第二</td>
<td>行</td>
</tr>
</table>

</body>
</html>

五、多行多列的表格

1.跨多列的表 <td colspan=#>
<table border=1><tr><td colspan=3>标题</td><tr><td>第一列</td>       <td>第二列</td>  <td>第三列</td><tr><td>A</td><td>B</td><td>C</td></table>
标题
第一列 第二列 第三列
A   B   C
2.跨多行的表 <td rowspan=#>
<table border=1><tr><td rowspan=3>标题</td><td>第一行</td> <td>A</td></tr><tr><td>第二行</td> <td>B</td></tr><tr><td>第三行</td> <td>C</td></tr></table>
标题  第一行 A
第二行 B
第三行 C
六、一行里包含多行的表格


这是一段

这是另外一段。

这个单元格里包含了一个表格：
A   B
C   D
这个单元格里包含了一个图片： 
HELLO
<html>
<body>

<table border="1">
<tr>
<td>
<p>这是一段</p>
<p>这是另外一段。</p>
</td>
<td>这个单元格里包含了一个表格：
<table border="1">
<tr>
<td>A</td>
<td>B</td>
</tr>
<tr>
<td>C</td>
<td>D</td>
</tr>
</table>
</td>
</tr>
<tr>
<td>这个单元格里包含了一个图片：
<img src = http://hiphotos.baidu.com/%C6%F3%B6%EC%D2%A7%B9%C7%CD%B7/pic/item/7a44bcda8ddc7823d0164e93.jpg">
</td>
<td>HELLO</td>
</tr>
</table>

</body>
</html>

___________________________________________________________________________

    average red
eyes
height  weight
males   1.9 0.003   40%
females 1.7 0.002   43%
<table border="1" summary="this table gives some statistics about fruit
　　 flies: average height and weight, and percentage
　　　　 with red eyes (for both males and females).">
 <caption>
  <em>a test table with merged ce lls</em></caption>
 <tbody>
  <tr>
   <th rowspan="2">
    &nbsp;</th>
   <th colspan="2">
    average</th>
   <th rowspan="2">
    red<br />
    eyes</th>
  </tr>
  <tr>
   <th>
    height</th>
   <th>
    weight</th>
  </tr>
  <tr>
   <th>
    males</th>
   <td>
    1.9</td>
   <td>
    0.003</td>
   <td>
    40%</td>
  </tr>
  <tr>
   <th>
    females</th>
   <td>
    1.7</td>
   <td>
    0.002</td>
   <td>
    43%</td>
  </tr>
 </tbody>
</table>
<p>
第1行第1列  第1行第2列
第2行第1列  第2行第2列
第3行第1列  第3行第2列
<table width="300" border="1"  bordercolor="#000000">
  <tr>
    <td>第1行第1列</td>
    <td>第1行第2列</td>
  </tr>
  <tr>
    <td>第2行第1列</td>
    <td>第2行第2列</td>
  </tr>
  <tr>
    <td>第3行第1列</td>
    <td>第3行第2列</td>
  </tr>
</table>

  -----------------------------------------------------------------

第1行第1列
第1行第2列
第1行第3列
第1行第4列
第2行第1列
第2行第2列
第2行第3列
第2行第4列
第3行第1列
第3行第2列
第3行第3列
第3行第4列
第4行第1列
第4行第2列
第4行第3列
第4行第4列
第5行第1列
第5行第2列
第5行第3列
第5行第4列
 

代码：

<p align="center">表格名称表格名称</p>
<table width="600" border="1" align="center" cellpadding="4" cellspacing="0" bordercolor="#000000">
  <tr>
    <td><div align="center">第1行第1列</div></td>
    <td><div align="center">第1行第2列</div></td>
    <td><div align="center">第1行第3列</div></td>
    <td><div align="center">第1行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第2行第1列</div></td>
    <td><div align="center">第2行第2列</div></td>
    <td><div align="center">第2行第3列</div></td>
    <td><div align="center">第2行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第3行第1列</div></td>
    <td><div align="center">第3行第2列</div></td>
    <td><div align="center">第3行第3列</div></td>
    <td><div align="center">第3行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第4行第1列</div></td>
    <td><div align="center">第4行第2列</div></td>
    <td><div align="center">第4行第3列</div></td>
    <td><div align="center">第4行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第5行第1列</div></td>
    <td><div align="center">第5行第2列</div></td>
    <td><div align="center">第5行第3列</div></td>
    <td><div align="center">第5行第4列</div></td>
  </tr>
</table>

---------------------------------------------------------------------------

第1行第1列
第1行第2列
第1行第3列
第1行第4列
第2行第1列
第2行第2列
第2行第3列
第2行第4列
第3行第1列
第3行第2列
第3行第3列
第3行第4列
第4行第1列
第4行第2列
第4行第3列
第4行第4列
第5行第1列
第5行第2列
第5行第3列
第5行第4列
 

代码：

<p align="center">表格名称表格名称</p>
<table width="600" border="1" align="center" cellpadding="4" cellspacing="0" bordercolor="#FF0000" bgcolor="#ECF5FF">
  <tr>
    <td><div align="center">第1行第1列</div></td>
    <td><div align="center">第1行第2列</div></td>
    <td><div align="center">第1行第3列</div></td>
    <td><div align="center">第1行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第2行第1列</div></td>
    <td><div align="center">第2行第2列</div></td>
    <td><div align="center">第2行第3列</div></td>
    <td><div align="center">第2行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第3行第1列</div></td>
    <td><div align="center">第3行第2列</div></td>
    <td><div align="center">第3行第3列</div></td>
    <td><div align="center">第3行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第4行第1列</div></td>
    <td><div align="center">第4行第2列</div></td>
    <td><div align="center">第4行第3列</div></td>
    <td><div align="center">第4行第4列</div></td>
  </tr>
  <tr>
    <td><div align="center">第5行第1列</div></td>
    <td><div align="center">第5行第2列</div></td>
    <td><div align="center">第5行第3列</div></td>
    <td><div align="center">第5行第4列</div></td>
  </tr>
</table>

---------------------------------------------------------

第1行第1列
第1行第2列
第1行第3列
第1行第4列
第2行第1列
第2行第2列
第2行第3列
第2行第4列
第3行第1列
第3行第2列
第3行第3列
第3行第4列
第4行第1列
第4行第2列
第4行第3列
第4行第4列
第5行第1列
第5行第2列
第5行第3列
第5行第4列
 

代码：

<p align="center">表格名称表格名称</p>
<table width="600" border="0" align="center" cellpadding="4" cellspacing="1" bgcolor="#FF0000">
  <tr>
    <td bgcolor="#FFFFFF"><div align="center">第1行第1列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第1行第2列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第1行第3列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第1行第4列</div></td>
  </tr>
  <tr>
    <td bgcolor="#FFFFFF"><div align="center">第2行第1列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第2行第2列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第2行第3列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第2行第4列</div></td>
  </tr>
  <tr>
    <td bgcolor="#FFFFFF"><div align="center">第3行第1列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第3行第2列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第3行第3列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第3行第4列</div></td>
  </tr>
  <tr>
    <td bgcolor="#FFFFFF"><div align="center">第4行第1列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第4行第2列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第4行第3列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第4行第4列</div></td>
  </tr>
  <tr>
    <td bgcolor="#FFFFFF"><div align="center">第5行第1列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第5行第2列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第5行第3列</div></td>
    <td bgcolor="#FFFFFF"><div align="center">第5行第4列</div></td>
  </tr>
</table>

 

------------------------------------------------------------------------------

  

新博进阶    圈子应读
网络安防    免费网盘
全球搜搜    语录名言
相声小品    影音视听
诗社文坛    时尚健身
智测良品    乱作一团
 
